#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

#include <string.h>
#include <err.h>
#include <unistd.h>
#include <syslog.h>
#include <stdarg.h>
#include <libgen.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>

//char * server_filename = "/tmp/socket-server";
//char * client_filename = "/tmp/socket-client";
//char * client_filename = "/var/www/run/socket-client"; 
//char * server_filename = "/var/www/run/socket-server";
char * server_filename = "/run/socket-server"; /* inside httpd chrooted /var/www */
char * client_filename = "/run/socket-client"; /* inside httpd chrooted /var/www */

int
main(void)
{
	//if (-1 == pledge("stdio", NULL)) 
	//	err(EXIT_FAILURE, "pledge");

	/*
	 * start of http stuff
	 */

	puts("Status: 200 OK\r");
	puts("Content-Type: text/json\r");
	/*  
	 *  application/atom+xml                  atom;
	 *  application/json                      json map topojson;
	 *  application/ld+json                   jsonld;
	 *  application/rss+xml                   rss;
	 *  application/vnd.geo+json              geojson;
	 *  application/xml                       rdf xml;
	 *  application/javascript                js;	
	 */

	puts("\r");

	printf("\n");
	printf("GATEWAY_INTERFACE: %s\n", getenv("GATEWAY_INTERFACE"));
	printf("SERVER_NAME: %s\n", getenv("SERVER_NAME"));
	printf("SERVER_SOFTWARE: %s\n", getenv("SERVER_SOFTWARE"));
	printf("SERVER_PROTOCOL: %s\n", getenv("SERVER_PROTOCOL"));
	printf("SERVER_PORT: %s\n", getenv("SERVER_PORT"));
	printf("REQUEST_METHOD: %s\n", getenv("REQUEST_METHOD"));
	printf("PATH_INFO: %s\n", getenv("PATH_INFO"));
	printf("PATH_TRANSLATED: %s\n", getenv("PATH_TRANSLATED"));
	printf("SCRIPT_NAME: %s\n", getenv("SCRIPT_NAME"));
	printf("DOCUMENT_ROOT: %s\n", getenv("DOCUMENT_ROOT"));
	printf("QUERY_STRING: %s\n", getenv("QUERY_STRING"));
	printf("REMOTE_HOST: %s\n", getenv("REMOTE_HOST"));
	printf("REMOTE_ADDR: %s\n", getenv("REMOTE_ADDR"));
	printf("AUTH_TYPE: %s\n", getenv("AUTH_TYPE"));
	printf("REMOTE_USER: %s\n", getenv("REMOTE_USER"));
	printf("REMOTE_IDENT: %s\n", getenv("REMOTE_IDENT"));
	printf("CONTENT_TYPE: %s\n", getenv("CONTENT_TYPE"));
	printf("CONTENT_LENGTH: %s\n", getenv("CONTENT_LENGTH"));
	printf("HTTP_FROM: %s\n", getenv("HTTP_FROM"));
	printf("HTTP_ACCEPT: %s\n", getenv("HTTP_ACCEPT"));
	printf("HTTP_USER_AGENT: %s\n", getenv("HTTP_USER_AGENT"));
	printf("HTTP_REFERER: %s\n", getenv("HTTP_REFERER"));
	
	printf("\n");
	printf("if REQUEST_METHOD is POST and QUERY_STRING commmands then use bind mount write-only\n");
	printf("if REQUEST_METHOD is GET and QUERY_STRING queries then use bind mount read-only\n");

	printf("SCRIPT_NAME: %s\n\n", basename(getenv("SCRIPT_NAME")));

	openlog(basename(getenv("SCRIPT_NAME")), LOG_PID, LOG_LOCAL3);
	syslog(LOG_WARNING, "Attempting: %s", "xyz");
	//syslog(LOG_AUTHPRIV | LOG_ERR);
	syslog(LOG_INFO, "%s logging to a bind mounted dir for CQRS", "tsutsu");
	//syslog(LOG_ERR, "Success/failure?: %m");

	/*
	 * daemon stuff
	 */

	int s;
	char obuf[100];
	struct sockaddr_un srv_un, cli_un = { 0 };


	srv_un.sun_family = AF_UNIX;
	strncpy(srv_un.sun_path, server_filename, sizeof(srv_un.sun_path));

	cli_un.sun_family = AF_UNIX;
	strncpy(cli_un.sun_path, client_filename, sizeof(cli_un.sun_path));
	unlink(cli_un.sun_path);

	if ((s = socket(AF_UNIX, SOCK_DGRAM, 0)) == -1) {
		syslog(LOG_INFO, "%s", "endpointclientd socket server");
		perror("endpointclientd socket server");
		exit(1);
	}

	/*
	 * Here, we bind to our client node, and connect to the server node. 
	 * As Unix domain sockets need to have endpoints on either end of the connection. 
	 * For more info, visit the URL.
	 */
	printf("%s\n", "before socket bind");
	if (bind(s, (struct sockaddr *)&cli_un, sizeof(cli_un)) == -1) {
		//TODO syslog
		syslog(LOG_INFO, "endpointclient d bind client %s", basename(getenv("SCRIPT_NAME")));
		perror(basename(getenv("SCRIPT_NAME")));
		exit(1);
	}
	printf("%s\n", "after socket bind");

	if (connect(s, (struct sockaddr *) &srv_un, sizeof(srv_un)) == -1) {
		//TODO syslog
		syslog(LOG_INFO, "%s", "endpointclientd connect client");
		perror("endpointclientd connect client");
		exit(1);
	}

	//TODO syslog
	//printf("endpointclientd Connected.\n");
	syslog(LOG_INFO, "%s", "endpointclientd Connected.");

	//while(printf("> "), fgets(obuf, 100, stdin), !feof(stdin)) {
	//	if (send(s, obuf, strlen(obuf), 0) == -1) {
	//		perror("endpointclientd send");
	//		syslog(LOG_INFO, "%s", "endpointclientd send");
	//		exit(1);
	//	}
	//	break;
	//}
	
	//fgets(obuf, 100, "hiiii");
	if (send(s, "hihihi", strlen("hihihi"), 0) == -1) {
		perror("endpointclientd send");
		syslog(LOG_INFO, "%s", "endpointclientd send");
		exit(1);
	}


	//TODO syslog
	//printf("endpointclientd Sent successfully.\n");
	syslog(LOG_INFO, "%s", "endpointclientd Sent successfully.");
	close(s);
	
	closelog();

	return(EXIT_SUCCESS);
}
